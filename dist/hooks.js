import React, { useEffect, useState, useCallback } from 'react';
import { NativeModules } from 'react-native';
import client from './client';
import Modal from './Components/Modal';
const useTwitter = (props) => {
    const [visible, setVisible] = useState(false);
    const [authURL, setAuthURL] = useState('');
    const [webViewState, setWebViewState] = useState(null);
    const [loggedIn, setLoggedIn] = useState(false);
    const login = async (callback_url) => {
        const url = await client.getLoginUrl(callback_url);
        setAuthURL(url);
        setVisible(true);
    };
    const clearCookies = (callback = () => { }) => {
        NativeModules.Networking.clearCookies(callback);
    };
    const TWModal = useCallback((modalProps) => {
        const onWebViewStateChanged = (webViewNavigation) => {
            setWebViewState(webViewNavigation);
        };
        return (<Modal visible={visible} authURL={authURL} onClosePress={() => setVisible(false)} onWebViewStateChanged={onWebViewStateChanged} headerColor={modalProps.headerColor} closeText={modalProps.closeText} renderHeader={modalProps.renderHeader}/>);
    }, [visible]);
    useEffect(() => {
        if (webViewState) {
            const match = webViewState.url.match(/\?oauth_token=.+&oauth_verifier=(.+)/);
            if (match && match.length > 0) {
                setVisible(false);
                setAuthURL('');
                client.getAccessToken(match[1]).then((response) => {
                    client.setAccessToken(response.oauth_token, response.oauth_token_secret);
                    setLoggedIn(true);
                }).catch((err) => {
                    console.warn(`[getAccessToken failed] ${err}`);
                    if (props?.onError) {
                        props.onError(err);
                    }
                });
            }
        }
    }, [webViewState]);
    useEffect(() => {
        if (loggedIn && props?.onSuccess) {
            const options = {
                include_entities: false,
                skip_status: true,
                include_email: true,
            };
            client.api('GET', 'account/verify_credentials.json', options).then((response) => {
                props.onSuccess(response, { oauth_token: client.Token, oauth_token_secret: client.TokenSecret });
                setLoggedIn(false);
            }).catch((err) => {
                console.warn(`[get("account/verify_credentials.json") failed] ${err}`);
                if (props?.onError) {
                    props.onError(err);
                }
                setLoggedIn(false);
            });
        }
    }, [loggedIn]);
    return {
        twitter: {
            login,
            clearCookies,
            getAccessToken: () => ({ oauth_token: client.Token, oauth_token_secret: client.TokenSecret }),
            setAccessToken: client.setAccessToken,
            setConsumerKey: client.setConsumerKey,
            api: client.api,
            post: client.post,
            get: client.get,
        },
        TWModal,
    };
};
export default useTwitter;
//# sourceMappingURL=data:application/json;base64,