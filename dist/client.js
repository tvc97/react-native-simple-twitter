import Request from './request';
import * as Util from './util';
import CustomError from './error';
const baseURL = 'https://api.twitter.com';
const apiURL = 'https://api.twitter.com/1.1';
const uploadURL = 'https://upload.twitter.com/1.1';
const requestTokenURL = '/oauth/request_token';
const authorizationURL = '/oauth/authorize';
const accessTokenURL = '/oauth/access_token';
class Client {
    constructor() {
        this.TokenRequestHeaderParams = {};
        this.setConsumerKey = (consumerKey, consumerSecret) => {
            this.ConsumerKey = consumerKey;
            this.ConsumerSecret = consumerSecret;
        };
        this.setAccessToken = (token, tokenSecret) => {
            this.Token = token;
            this.TokenSecret = tokenSecret;
        };
        this.getLoginUrl = async (callback = '') => {
            this.TokenRequestHeaderParams = Util.createTokenRequestHeaderParams(this.ConsumerKey, { callback });
            this.TokenRequestHeaderParams = Util.createSignature(this.TokenRequestHeaderParams, 'POST', baseURL + requestTokenURL, this.ConsumerSecret);
            const result = await Request('POST', baseURL + requestTokenURL, this.TokenRequestHeaderParams);
            if ('errors' in result) {
                throw new CustomError(result);
            }
            this.setAccessToken(result.oauth_token, result.oauth_token_secret);
            return `${baseURL + authorizationURL}?oauth_token=${this.Token}`;
        };
        this.getAccessToken = async (verifier = '') => {
            this.TokenRequestHeaderParams = Util.createTokenRequestHeaderParams(this.ConsumerKey, { token: this.Token });
            this.TokenRequestHeaderParams = Util.createSignature(this.TokenRequestHeaderParams, 'POST', baseURL + accessTokenURL, this.ConsumerSecret, this.TokenSecret);
            this.TokenRequestHeaderParams.oauth_verifier = verifier;
            const result = await Request('POST', baseURL + accessTokenURL, this.TokenRequestHeaderParams);
            if ('errors' in result) {
                throw new CustomError(result);
            }
            this.setAccessToken(result.oauth_token, result.oauth_token_secret);
            return {
                oauth_token: result.oauth_token,
                oauth_token_secret: result.oauth_token_secret,
            };
        };
        this.api = async (method, endpoint, params = {}) => {
            const apiEndpoint = endpoint.slice(0, 1) !== '/' ? `/${endpoint}` : endpoint;
            const _apiURL = /upload/i.test(endpoint) ? uploadURL : apiURL;
            this.TokenRequestHeaderParams = Util.createTokenRequestHeaderParams(this.ConsumerKey, { token: this.Token, params });
            this.TokenRequestHeaderParams = Util.createSignature(this.TokenRequestHeaderParams, method, _apiURL + apiEndpoint, this.ConsumerSecret, this.TokenSecret);
            const result = await Request(method, _apiURL +
                (params
                    ? `${apiEndpoint}?${Util.encodeParamsToString(params)}`
                    : apiEndpoint), this.TokenRequestHeaderParams);
            if ('errors' in result) {
                throw new CustomError(result);
            }
            return result;
        };
        this.post = async (endpoint, params = {}) => {
            const result = await this.api('POST', endpoint, params);
            return result;
        };
        this.get = async (endpoint, params = {}) => {
            const result = await this.api('GET', endpoint, params);
            return result;
        };
    }
}
export default new Client();
//# sourceMappingURL=data:application/json;base64,